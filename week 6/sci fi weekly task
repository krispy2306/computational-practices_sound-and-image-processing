import processing.sound.*;

SinOsc sineOsc;
TriOsc triOsc;
LowPass filter;

float startTime;
boolean soundPlayed = false;

void setup() {
  size(640, 360);
  background(0);

  // initialise oscillators
  sineOsc = new SinOsc(this);
  triOsc = new TriOsc(this);
  filter = new LowPass(this);

  // no volume
  sineOsc.amp(0.0);
  triOsc.amp(0.0);
  sineOsc.freq(220);
  triOsc.freq(220);
  
  // apply filter to both
  filter.process(sineOsc);
  filter.process(triOsc);

  
  sineOsc.play();
  triOsc.play();

  startTime = millis();
}

void draw() {
  background(0);

  float elapsed = millis() - startTime;
  float duration = 7000; // 7 seconds

  if (elapsed < duration) {
    
    float baseFreq = map(elapsed, 0, duration, 220, 660);
    float vibrato = 15 * sin(radians(elapsed * 2));
    float freq = baseFreq + vibrato;

    // apply to both oscillators
    sineOsc.freq(freq);
    triOsc.freq(freq * 0.5); // lower harmonic 

    // fade in fade out
    float amp;
    if (elapsed < duration * 0.3) {
      amp = map(elapsed, 0, duration * 0.3, 0.0, 0.5);
    } else {
      amp = map(elapsed, duration * 0.3, duration, 0.5, 0.0);
    }
    sineOsc.amp(amp);
    triOsc.amp(amp * 0.6); // slightly quieter triangle wave

    
    float cutoff = map(elapsed, 0, duration, 200, 5000);
    filter.freq(cutoff);

  } else if (!soundPlayed) {
    sineOsc.stop();
    triOsc.stop();
    soundPlayed = true;
  }
}
